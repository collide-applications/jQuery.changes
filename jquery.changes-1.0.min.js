 /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *                                                                            *
 * jQuery Changes Plugin                                                      *
 *                                                                            *
 * Check all changes on a HTML form and show message if the user tries to     *
 * leave the page before saving.                                              *
 *                                                                            *
 * @version             1.0                                                   *
 * @copyright           (c) Collide Applications 2011                         *
 * @author              Radu Graur                                            *
 * @email               radu.graur@gmail.com                                  *
 * @link                https://github.com/collide-applications/jQuery.changes*
 *                                                                            *
 * Do not delete or modify this header!                                       *
 *                                                                            *
 * Plugin call example:                                                       *
 *                                                                            *
 * $(function(){                                                              *
 *     $('#selector').changes({                                               *
 *          callback:       myCallback,                                       *
 *          message:        'Any changes will be lost!',                      *
 *          excludeTrigger: 'exclude',                                        *
 *          excludeFields:  ['.field1', '#field2', 'checkbox']                *
 *     });                                                                    *
 * });                                                                        *
 *                                                                            *
 * Reset forms:                                                               *
 * This function could be used when the form is saved with AJAX.              *
 * On the success callback of the AJAX call the form should be reinitialized  *
 * with the values already saved.                                             *
 *                                                                            *
 * $('#form_to_reset').changes( 'initialize' );                               *
 *                                                                            *
 * Plugin parameters:                                                         *
 * - callback: function to be called before unload;                           *
 * - message: custom message to show on page unload;                          *
 * - excludeTrigger: class name for elements that will not trigger form check;*
 * - excludeFields: array of elements to be excluded from check;              *
 *                                                                            *
 * Public parameters:                                                         *
 * - $.fn.changes.defaults: default values for plugin parameters;             *
 * - $.fn.changes.params: values for plugin parameters after initialization;  *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

(function($){var methods=new Object();$.fn.changes=function(){if(typeof(arguments[0])=='string'){if($.isFunction(methods[arguments[0]])){methods[arguments[0]].call(this,(arguments[1]||{}));}
return false;}
$.fn.changes.instance=this;$.fn.changes.params=$.extend($.fn.changes.defaults,(arguments[0]||null));_bindUnload.call(this);return methods.initialize.call(this);};$.fn.changes.defaults={callback:null,message:'',changedClass:'changed',excludeTrigger:null,excludeFields:[]};methods.initialize=function(){if(typeof($.fn.changes.instance)==='object'&&$.fn.changes.instance!=null){return $(this).each(function(){$(':text, :password, [type=hidden], textarea',this).each(function(){$(this).data('old_val',$(this).val()).removeClass($.fn.changes.params.changedClass);});$(':checkbox, :radio',this).each(function(){$(this).data('old_val',$(this).attr('checked')).removeClass($.fn.changes.params.changedClass);});$('select',this).each(function(){$(this).data('old_val',$(this).val()).data('options',_serializeList.call(this)).removeClass($.fn.changes.params.changedClass);});});}
return false;}
function _bindUnload(){var globalThis=this;$(window).bind('beforeunload',function(event){if(typeof(event.target)=='object'){if(_isChanged.call(globalThis,event.target.activeElement)){if($.fn.changes.params.callback!=null&&$.isFunction($.fn.changes.params.callback)){$.fn.changes.params.callback.call();}
return $.fn.changes.params.message;}}});}
function _isChanged(trigger){var changed=false;$(this).each(function(){if((trigger.type!='submit'||trigger.form.submit!=$(this)[0].submit)&&trigger.className!=$.fn.changes.params.excludeTrigger){changed=_scanTextFields.call(this,changed);changed=_scanCheckFields.call(this,changed);changed=_scanSelectFields.call(this,changed);}});return changed;}
function _scanTextFields(changed){$(':text, :password, [type=hidden], textarea',this).not($.fn.changes.params.excludeFields.toString()).each(function(){if($(this).data('old_val')!=$(this).val()){_markField.call(this);changed=true;}else{$(this).removeClass($.fn.changes.params.changedClass);}});return changed;}
function _scanCheckFields(changed){$(':checkbox, :radio',this).not($.fn.changes.params.excludeFields.toString()).each(function(){if($(this).data('old_val')!=$(this).attr('checked')){_markField.call(this);changed=true;}else{$(this).removeClass($.fn.changes.params.changedClass);}});return changed;}
function _scanSelectFields(changed){$('select',this).not($.fn.changes.params.excludeFields.toString()).each(function(){if($(this).data('old_val').toString()!=$(this).val().toString()||_serializeList.call(this)!=$(this).data('options')){_markField.call(this);changed=true;}else{$(this).removeClass($.fn.changes.params.changedClass);}});return changed;}
function _serializeList(){var serialized='';var $options=$(this).find('option');$options.each(function(i){var $end=';';if(i==$options.length-1){$end='';}
serialized+=$(this).val()+':'+$(this).text()+$end;});return serialized;}
function _markField(){if($.fn.changes.params.changedClass!=null){$(this).addClass($.fn.changes.params.changedClass);}}})(jQuery);